coord_sf(xlim = c(st_coordinates(limits)[,1]),
ylim = c(st_coordinates(limits)[,2]),
crs=st_crs("EPSG:32610"))
plot(g)
g = plotBase(scale=scale, projection="UTM", labels=FALSE)
g = g +
geom_polygon(data=meshDF,
aes(x=x, y=y, group = id),
alpha=0, color="black", linewidth=1) +
coord_sf(crs=st_crs("EPSG:32610"))
plot(g)
g = g +
geom_polygon(data=meshDF,
aes(x=x, y=y, group = id),
fill=NA, color="black", linewidth=1) +
coord_sf(crs=st_crs("EPSG:32610"))
g = plotBase(scale=scale, projection="UTM", labels=FALSE)
g = g +
geom_polygon(data=meshDF,
aes(x=x, y=y, group = id),
fill=NA, color="black", linewidth=1) +
coord_sf(crs=st_crs("EPSG:32610"))
plot(g)
ggplot(meshDF)+geom_polygon(aes(x=x, y=y, group=id), fill=NA, colour="black", linewidth=1)
ggplot(meshDF2)+geom_polygon(aes(x=x, y=y, group=id), fill=NA, colour="black", linewidth=1)
g2 = ggplot(meshDF) +
geom_polygon(aes(x=x, y=y, group = id),
fill=NA, color="black", linewidth=1) +
coord_sf(crs=st_crs("EPSG:32610"))
plot(g2)
meshDF = data.frame(id=id, x=1000*x, y=1000*y)
g = plotBase(scale=scale, projection="UTM", labels=FALSE)
g = g +
geom_polygon(data=meshDF,
aes(x=x, y=y, group = id),
fill=NA, color="black", linewidth=1) +
coord_sf(crs=st_crs("EPSG:32610"))
plot(g)
g = plotBase(scale=scale, projection="UTM", labels=FALSE)
g = g +
geom_polygon(data=meshDF,
aes(x=x, y=y, group = id),
fill=NA, color="black", linewidth=1) +
coord_sf(xlim = c(st_coordinates(limits)[,1]),
ylim = c(st_coordinates(limits)[,2]),
crs=st_crs("EPSG:32610"))
plot(g)
# plot
g = plotBase(scale=scale, projection="UTM", labels=FALSE)
g = g +
geom_polygon(data=meshDF,
aes(x=x, y=y, group = id),
fill=NA, color="black", linewidth=0.5) +
coord_sf(xlim = c(st_coordinates(limits)[,1]),
ylim = c(st_coordinates(limits)[,2]),
crs=st_crs("EPSG:32610"))
plot(g)
# A function to plot the mesh onto the base map
#
# mesh - inla.mesh object
# pts - options co-ordinates to plot
# scale - doesn't do anything atm
# proj - which projection the given data is in (should all be in same format)
plotMesh = function(mesh, pts=NULL, scale=1.5, proj="UTM"){
# taken from:
# https://gist.github.com/thriveth/8560036
CB_color_cycle = c('#377eb8', '#ff7f00', '#4daf4a',
'#f781bf', '#a65628', '#984ea3',
'#999999', '#e41a1c', '#dede00')
if (proj == "lonLat"){
g = plotBase(scale=scale, projection="lonLat", labels=FALSE, countryBoundary=FALSE)
xy = mesh$loc[,1:2]
latLon = projCSZ(xy, inverse=TRUE, units="km")
mesh$loc[,1:2] = latLon
g = g +
gg(mesh,
edge.color=CB_color_cycle[2], edge.linewidth=0.15,
int.linewidth=0.75, int.color=CB_color_cycle[1],
ext.linewidth = 0.75, ext.color = CB_color_cycle[1]) +
coord_sf(xlim=-c(131, 120), ylim=c(36, 54))
}
else{
g = plotBase(scale=scale, projection="UTM", labels=FALSE, countryBoundary=FALSE)
# create the limits
limits = data.frame(x = -c(131, 120),
y = c(36, 54))
limits = st_as_sf(x=limits,
coords = c("x", "y"),
crs=st_crs("EPSG:4326"))
limits = toUTM(limits)
mesh$loc[,1:2] = 1000*mesh$loc[,1:2]
g = g +
gg(mesh,
edge.color=CB_color_cycle[2], edge.linewidth=0.15,
int.linewidth=0.75, int.color=CB_color_cycle[1],
ext.linewidth = 0.75, ext.color = CB_color_cycle[1]) +
coord_sf(xlim = c(st_coordinates(limits)[,1]),
ylim = c(st_coordinates(limits)[,2]),
crs=st_crs("EPSG:32610"))
}
# if want to plot the centers of the subfaults
if (is.null(pts) == FALSE){
if (proj == "UTM"){
pts = projCSZ(pts, inverse=TRUE, units="km")
}
g = g +
geom_point(data=data.frame(pts), aes(x=X, y=Y), size=0.1, color="red")
}
return(g)
}
plotMesh(spdeMesh)
# A function to plot the mesh onto the base map
#
# mesh - inla.mesh object
# pts - options co-ordinates to plot
# scale - doesn't do anything atm
# proj - which projection the given data is in (should all be in same format)
plotMesh = function(mesh, pts=NULL, scale=1.5, proj="UTM"){
# taken from:
# https://gist.github.com/thriveth/8560036
CB_color_cycle = c('#377eb8', '#ff7f00', '#4daf4a',
'#f781bf', '#a65628', '#984ea3',
'#999999', '#e41a1c', '#dede00')
if (proj == "lonLat"){
g = plotBase(scale=scale, projection="lonLat", labels=FALSE, countryBoundary=FALSE)
xy = mesh$loc[,1:2]
latLon = projCSZ(xy, inverse=TRUE, units="km")
mesh$loc[,1:2] = latLon
g = g +
gg(mesh,
edge.color=CB_color_cycle[2], edge.linewidth=0.15,
int.linewidth=0.75, int.color=CB_color_cycle[3],
ext.linewidth = 0.75, ext.color = CB_color_cycle[1]) +
coord_sf(xlim=-c(131, 120), ylim=c(36, 54))
}
else{
g = plotBase(scale=scale, projection="UTM", labels=FALSE, countryBoundary=FALSE)
# create the limits
limits = data.frame(x = -c(131, 120),
y = c(36, 54))
limits = st_as_sf(x=limits,
coords = c("x", "y"),
crs=st_crs("EPSG:4326"))
limits = toUTM(limits)
# coord_sf expects meters
mesh$loc[,1:2] = 1000*mesh$loc[,1:2]
g = g +
gg(mesh,
edge.color=CB_color_cycle[2], edge.linewidth=0.15,
int.linewidth=0.75, int.color=CB_color_cycle[1],
ext.linewidth = 0.75, ext.color = CB_color_cycle[1]) +
coord_sf(xlim = c(st_coordinates(limits)[,1]),
ylim = c(st_coordinates(limits)[,2]),
crs=st_crs("EPSG:32610"))
}
# if want to plot the centers of the subfaults
if (is.null(pts) == FALSE){
if (proj == "UTM"){
pts = projCSZ(pts, inverse=TRUE, units="km")
}
g = g +
geom_point(data=data.frame(pts), aes(x=X, y=Y), size=0.1, color="red")
}
return(g)
}
plotMesh(spdeMesh)
# A function to plot the mesh onto the base map
#
# mesh - inla.mesh object
# pts - options co-ordinates to plot
# scale - doesn't do anything atm
# proj - which projection the given data is in (should all be in same format)
plotMesh = function(mesh, pts=NULL, scale=1.5, proj="UTM"){
# taken from:
# https://gist.github.com/thriveth/8560036
CB_color_cycle = c('#377eb8', '#ff7f00', '#4daf4a',
'#f781bf', '#a65628', '#984ea3',
'#999999', '#e41a1c', '#dede00')
if (proj == "lonLat"){
g = plotBase(scale=scale, projection="lonLat", labels=FALSE, countryBoundary=FALSE)
xy = mesh$loc[,1:2]
latLon = projCSZ(xy, inverse=TRUE, units="km")
mesh$loc[,1:2] = latLon
g = g +
gg(mesh,
edge.color=CB_color_cycle[2], edge.linewidth=0.15,
int.linewidth=0.75, int.color=CB_color_cycle[3],
ext.linewidth = 0.75, ext.color = CB_color_cycle[1]) +
coord_sf(xlim=-c(131, 120), ylim=c(36, 54))
}
else{
g = plotBase(scale=scale, projection="UTM", labels=FALSE, countryBoundary=FALSE)
# create the limits
limits = data.frame(x = -c(131, 120),
y = c(36, 54))
limits = st_as_sf(x=limits,
coords = c("x", "y"),
crs=st_crs("EPSG:4326"))
limits = toUTM(limits)
# coord_sf expects meters
mesh$loc[,1:2] = 1000*mesh$loc[,1:2]
g = g +
gg(mesh,
edge.color=CB_color_cycle[2], edge.linewidth=0.15,
int.linewidth=0.75, int.color=CB_color_cycle[3],
ext.linewidth = 0.75, ext.color = CB_color_cycle[1]) +
coord_sf(xlim = c(st_coordinates(limits)[,1]),
ylim = c(st_coordinates(limits)[,2]),
crs=st_crs("EPSG:32610"))
}
# if want to plot the centers of the subfaults
if (is.null(pts) == FALSE){
if (proj == "UTM"){
pts = projCSZ(pts, inverse=TRUE, units="km")
}
g = g +
geom_point(data=data.frame(pts), aes(x=X, y=Y), size=0.1, color="red")
}
return(g)
}
plotMesh(spdeMesh)
?save
save(spdeMesh, file="spdeMeshFull.RData")
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Data/SPDE")
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Data/SPDE")
save(spdeMesh, file="spdeMeshFull.RData")
fullFault
plotFault(fullFault)
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Data/Fault Geometry")
save(fullFault, file="fullFault.RData")
# A function to plot the inla mesh and the subfault ontop of each other
#
# fault - like the output of getFullFaultGeom, describes the subfaults
#       - assumes is given in Lon/Lat coordinates
# mesh - inla.mesh object
#      - assumes is made in UTM
# scale - controls the size of text on basemap
plotBothMesh = function(fault, mesh, scale=1.5){
# add the underlying spatial field plot SPDE
g = plotBase(scale=scale, projection="UTM", labels=F, countryBoundary=F)
# coord_sf expects things in meters
mesh$loc[,1:2] = 1000*mesh$loc[,1:2]
g = g +
gg(mesh, edge.color="red",
edge.linewidth=0.15,
interior=FALSE,
exterior=FALSE)
# create polygon dataframe from trigeom object
nsf = length(fault)
ids = c()
lons = c()
lats = c()
for (i in 1:nsf){
ids = c(ids, rep(i, 4))
lons = c(lons, fault[[i]]$corners[,1], fault[[i]]$corners[1,1])
lats = c(lats, fault[[i]]$corners[,2], fault[[i]]$corners[1,2])
}
xy = cbind(lons, lats)
xy = projCSZ(xy, inverse=T, units="km")
xy = 1000*xy # coord_sf expects m
subfaultDF = data.frame(
id = ids,
x = xy[,1],
y = xy[,2]
)
# add subfault mesh
g = g +
geom_polygon(data=subfaultDF, aes(x=x, y=y, group=id),
color="blue", fill=NA, linewidth=0.15)
# Finally add the centroids of subfaults
x = rep(0, nsf)
y = rep(0, nsf)
for (i in 1:nsf){
x[i] = fault[[i]]$lon
y[i] = fault[[i]]$lat
}
xy = cbind(x, y)
xy = projCSZ(xy, inverse=T, units="km")
xy = 1000*xy # coord_sf expects m
centers = data.frame(x=xy[,1], y=xy[,2])
g = g +
geom_point(data=centers, aes(x=x, y=y),
colour="green", size=2)
# finally sort out the projection and limits
limits = data.frame(x = -c(131, 120),
y = c(36, 54))
limits = st_as_sf(x=limits,
coords = c("x", "y"),
crs=st_crs("EPSG:4326"))
limits = toUTM(limits)
g = g +
coord_sf(xlim = c(st_coordinates(limits)[,1]),
ylim = c(st_coordinates(limits)[,2]),
crs=st_crs("EPSG:32610"))
return(g)
}
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/testing.R", echo=TRUE)
ggplot()+
geom_polygon(data=subfaultDF, aes(x=x, y=y, group=id),
color="blue", fill=NA, linewidth=0.15)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/testing.R", echo=TRUE)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/testing.R", echo=TRUE)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/testing.R", echo=TRUE)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/testing.R", echo=TRUE)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/testing.R", echo=TRUE)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/testing.R", echo=TRUE)
ggplot()+
geom_point(data=centers, aes(x=x, y=y),
colour="green", size=2)
ggplot()+
geom_point(data=centers, aes(x=x, y=y),
colour="green", size=2)+
coord_sf(crs=st_crs("EPSG:32610"))
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/testing.R", echo=TRUE)
ggplot()+
geom_polygon(data=subfaultDF, aes(x=x, y=y, group=id),
color="blue", fill=NA, linewidth=0.15)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/testing.R", echo=TRUE)
ggplot()+
geom_polygon(data=subfaultDF, aes(x=x, y=y, group=id),
color="blue", fill=NA, linewidth=0.15)
ggplot()+gg(mesh)
spdeMesh
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/testing.R", echo=TRUE)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/testing.R", echo=TRUE)
ggplot()+gg(mesh)+coord_sf(crs=st_crs("EPSG:32610"))
ggplot()+
geom_polygon(data=subfaultDF, aes(x=x, y=y, group=id),
color="blue", fill=NA, linewidth=0.15)+
coord_sf(crs=st_crs("EPSG:32610"))
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/testing.R", echo=TRUE)
ggplot()+
geom_polygon(data=subfaultDF, aes(x=x, y=y, group=id),
color="blue", fill=NA, linewidth=0.15)+
coord_sf(crs=st_crs("EPSG:32610"))
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/testing.R", echo=TRUE)
ggplot()+
geom_polygon(data=subfaultDF, aes(x=x, y=y, group=id),
color="blue", fill=NA, linewidth=0.15)+
coord_sf(crs=st_crs("EPSG:32610"))
# create polygon dataframe from trigeom object
nsf = length(fault)
ids = c()
lons = c()
lats = c()
for (i in 1:nsf){
ids = c(ids, rep(i, 4))
lons = c(lons, fault[[i]]$corners[,1], fault[[i]]$corners[1,1])
lats = c(lats, fault[[i]]$corners[,2], fault[[i]]$corners[1,2])
}
xy = cbind(lons, lats)
xy = projCSZ(xy, inverse=T, units="km")
xy = 1000*xy # coord_sf expects m
subfaultDF = data.frame(
id = ids,
x = xy[,1],
y = xy[,2]
)
ggplot()+
geom_polygon(data=subfaultDF, aes(x=x, y=y, group=id),
color="blue", fill=NA, linewidth=0.15)+
coord_sf(crs=st_crs("EPSG:32610"))
# create polygon dataframe from trigeom object
nsf = length(fault)
ids = c()
lons = c()
lats = c()
for (i in 1:nsf){
ids = c(ids, rep(i, 4))
lons = c(lons, fault[[i]]$corners[,1], fault[[i]]$corners[1,1])
lats = c(lats, fault[[i]]$corners[,2], fault[[i]]$corners[1,2])
}
xy = cbind(lons, lats)
xy = projCSZ(xy, inverse=T, units="km")
xy = 10000*xy # coord_sf expects m
subfaultDF = data.frame(
id = ids,
x = xy[,1],
y = xy[,2]
)
ggplot()+
geom_polygon(data=subfaultDF, aes(x=x, y=y, group=id),
color="blue", fill=NA, linewidth=0.15)+
coord_sf(crs=st_crs("EPSG:32610"))
# create polygon dataframe from trigeom object
nsf = length(fault)
ids = c()
lons = c()
lats = c()
for (i in 1:nsf){
ids = c(ids, rep(i, 4))
lons = c(lons, fault[[i]]$corners[,1], fault[[i]]$corners[1,1])
lats = c(lats, fault[[i]]$corners[,2], fault[[i]]$corners[1,2])
}
xy = cbind(lons, lats)
xy = projCSZ(xy, inverse=T, units="km")
xy = 100000*xy # coord_sf expects m
subfaultDF = data.frame(
id = ids,
x = xy[,1],
y = xy[,2]
)
ggplot()+
geom_polygon(data=subfaultDF, aes(x=x, y=y, group=id),
color="blue", fill=NA, linewidth=0.15)+
coord_sf(crs=st_crs("EPSG:32610"))
fault[[1]]
lons
# create polygon dataframe from trigeom object
nsf = length(fault)
ids = c()
lons = c()
lats = c()
for (i in 1:nsf){
ids = c(ids, rep(i, 4))
lons = c(lons, fault[[i]]$corners[,1], fault[[i]]$corners[1,1])
lats = c(lats, fault[[i]]$corners[,2], fault[[i]]$corners[1,2])
}
xy = cbind(lons, lats)
xy = projCSZ(xy, inverse=T, units="km")
subfaultDF = data.frame(
id = ids,
x = xy[,1],
y = xy[,2]
)
ggplot()+
geom_polygon(data=subfaultDF, aes(x=x, y=y, group=id),
color="blue", fill=NA, linewidth=0.15)+
coord_sf(crs=st_crs("EPSG:32610"))
# create polygon dataframe from trigeom object
nsf = length(fault)
ids = c()
lons = c()
lats = c()
for (i in 1:nsf){
ids = c(ids, rep(i, 4))
lons = c(lons, fault[[i]]$corners[,1], fault[[i]]$corners[1,1])
lats = c(lats, fault[[i]]$corners[,2], fault[[i]]$corners[1,2])
}
xy = cbind(lons, lats)
xy = projCSZ(xy, inverse=T, units="m")
subfaultDF = data.frame(
id = ids,
x = xy[,1],
y = xy[,2]
)
ggplot()+
geom_polygon(data=subfaultDF, aes(x=x, y=y, group=id),
color="blue", fill=NA, linewidth=0.15)+
coord_sf(crs=st_crs("EPSG:32610"))
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/testing.R", echo=TRUE)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/testing.R", echo=TRUE)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotMesh(spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotMesh(spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotMesh(spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotMesh(spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotMesh(spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
?gg
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotBothMesh(fullFault, spdeMesh)
colourLegend = c('#ff7f00' = "SPDE Mesh",
'#4daf4a' = "Subfaults",
'#f781bf' = "Subfault Centroids")
plotBothMesh(fullFault, spdeMesh)
plotMesh(spdeMesh)
spdeMesh
plotGrid(varName="dip", projection="UTM")
plotGrid(varName="dip", projection="UTM", legendTitle="Dip °")
plotGrid(varName="dip", projection="UTM", legendTitle="Dip (°)")
plotGrid(varName="strike", projection="UTM", legendTitle="Strike (°)")
length(fullFault)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/taperFunction.R", echo=TRUE)
