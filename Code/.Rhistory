g = g +
scale_fill_viridis_c()
}
g = g +
labs(x="x (m)",
y="y (m)",
fill=legendTitle) +
coord_fixed()
return(g)
}
g = displayForest(pines, legendTitle="Detected Number\nof Pine Trees")
g
ggsave("Pines Detected.pdf", path=plotPath, width=5, height=3.5)
g = displayForest(probs, legendTitle="Detected Probability", discrete=F)
g
g = displayForest(probs, legendTitle="Detection Probability", discrete=F)
g
ggsave("Detection Probability.pdf", path=plotPath, width=5, height=3.5)
lambdaHat = sum(pines$N_obs)/
100*sum(probs$alpha)
lambdaHat
# where to save plots
plotPath = "~/Uni/NTNU/Spatial Stats/Project 2/Plots/"
# where to get data from
dataPath = "~/Uni/NTNU/Spatial Stats/Project 2/Data/"
# read in data files
pines = read.table(paste0(dataPath, "obspines.txt"),
header=T)
probs = read.table(paste0(dataPath, "obsprob.txt"),
header=T)
N = simulatePriorN(pines$N_obs, probs$alpha)
plotSimulation(N, legendTitle="Prior Number\nof Pine Trees", maxColour=max(N))
library(ggplot2)
library(TMB)
library(mcmc)
# Function to plot pine tree data
# data - a table with x,y,z values
# legendTitle - The actual name of the z variable
# discrete - If the z variable is discrete or continuous
# returns: a ggplot object with z plotted in colour over grid of x, y
displayForest = function(data, legendTitle, discrete=T, maxColour=F){
plotDF = as.data.frame(data)
colnames(plotDF) = c("x", "y", "z")
if (discrete == T){
plotDF$z = as.factor(plotDF$z)
}
g = ggplot(plotDF, aes(x=x, y=y)) +
geom_raster(aes(fill=z))
if(maxColour!=F){
end = max(data[,3])/maxColour
} else{
end = 1
}
if (discrete == T){
g = g +
scale_fill_viridis_d(begin=0, end=end)
} else {
g = g +
scale_fill_viridis_c(begin=0, end=end)
}
g = g +
labs(x="x (m)",
y="y (m)",
fill=legendTitle) +
coord_fixed()
return(g)
}
# Script that simulates a point process based on Lambda_2 estimator
# could be more generic so I can use different data
simulatePriorN = function(m, alpha){
lambdaHat = 900*sum(m)/
sum(alpha)
lambdaHatCell = (10/300)*(10/300)*lambdaHat
Ns = rpois(n=30*30, lambda=lambdaHatCell)
return(Ns)
}
# this takes Lambda Hat. Scales to cell level inside.
simulatePosteriorN = function(m, alpha, lambda){
l = lambda * (1- alpha) / 900
xSim = rpois(900, l)
#n = xSim + m
n=xSim
return(n)
}
plotSimulation = function(N, legendTitle, maxColour){
Nsim = matrix(N, nrow=30, ncol=30)
Nfull = c()
xFlag = T
# loop over all cells
# create data
for (i in 1:30){
for (j in 1:30){
# draws locations if have a point in cell
thisN = Nsim[i,j]
if (thisN > 0){
# create data point location matrix
X = cbind(runif(thisN, min=10*(i-1), max=10*i),
runif(thisN, min=10*(j-1), max=10*j))
} else{
X = cbind(NA, NA)
}
Nfull[[i*j]] = list(i=i,j=j,n=thisN,
locs=X)
if (any(is.na(X)) == F){
if (xFlag){
Nx = X
xFlag = F
} else{
Nx = rbind(Nx,
X)
}
}
}
}
pineSim = cbind(x=pines$x, y=pines$y, z=N)
g1 = displayForest(pineSim, legendTitle=legendTitle,
discrete=T, maxColour=maxColour)
plot(g1)
plotDF = as.data.frame(Nx)
colnames(plotDF) = c("x", "y")
g2 = ggplot(plotDF, aes(x=x, y=y)) +
geom_point(colour="#56B4E9") +
labs(x="x (m)",
y="y (m)") +
xlim(0,300) +
ylim(0,300) +
coord_fixed()
plot(g2)
}
# where to save plots
plotPath = "~/Uni/NTNU/Spatial Stats/Project 2/Plots/"
# where to get data from
dataPath = "~/Uni/NTNU/Spatial Stats/Project 2/Data/"
# read in data files
pines = read.table(paste0(dataPath, "obspines.txt"),
header=T)
probs = read.table(paste0(dataPath, "obsprob.txt"),
header=T)
N = simulatePriorN(pines$N_obs, probs$alpha)
plotSimulation(N, legendTitle="Prior Number\nof Pine Trees", maxColour=max(N))
lambdaHat = sum(pines$N_obs)/
100*sum(probs$alpha)
lambdaHat
N = matrix(0, nrow=3, ncol=900)
lambdaHat = sum(pines$N_obs)/
(100*sum(probs$alpha))
lambdaHat
sum(pines$N_obs)
sum(probs$alpha)
lambdaHat
nMax = 0
for (i in 1:3){
N = simulatePriorN(pines$N_obs, probs$alpha)
if (max(N) > nMax){
nMax = max(N)
}
plotSimulation(N, legendTitle="Prior Number\nof Pine Trees", maxColour=nMax)
}
# Script that simulates a point process based on Lambda_2 estimator
# could be more generic so I can use different data
simulatePriorN = function(m, alpha){
lambdaHat = sum(m)/ (100*sum(alpha))
lambdaHatCell = 10*10*lambdaHat
Ns = rpois(n=30*30, lambda=lambdaHatCell)
return(Ns)
}
nMax = 0
for (i in 1:3){
N = simulatePriorN(pines$N_obs, probs$alpha)
if (max(N) > nMax){
nMax = max(N)
}
plotSimulation(N, legendTitle="Prior Number\nof Pine Trees", maxColour=nMax)
}
simulatePosteriorN = function(m, alpha){
lambdaHat = sum(m)/ (100*sum(alpha))
lambdaPost = 100 * lambdaHat * (1 - alpha)
print(length(lambdaPost))
xSim = rpois(900, lambdaPost)
n = xSim + m
return(n)
}
test = simulatePosterior(pines$N_obs, probs$alpha)
test = simulatePosteriorN(pines$N_obs, probs$alpha)
plot(test)
simulatePosteriorN = function(m, alpha){
lambdaHat = sum(m)/ (100*sum(alpha))
lambdaPost = 100 * lambdaHat * (1 - alpha)
xSim = rpois(900, lambdaPost)
n = xSim + m
return(n)
}
# Draw from the posterior
N = matrix(0, nrow=3, ncol=900)
for (s in 1:3){
N[s,] = simulatePosteriorN(pines$N_obs, probs$alpha, lambdaHat)
}
# Draw from the posterior
N = matrix(0, nrow=3, ncol=900)
for (s in 1:3){
N[s,] = simulatePosteriorN(pines$N_obs, probs$alpha)
}
nMax = max(N)
# plot realisations
for (i in 1:3){
plotSimulation(N[i,],
legendTitle="Posterior Number\nof Pine Trees",
maxColour=nMax)
}
plotSimulation = function(N, legendTitle, maxColour){
Nsim = matrix(N, nrow=30, ncol=30)
Nfull = c()
xFlag = T
# loop over all cells
# create data
for (i in 1:30){
for (j in 1:30){
# draws locations if have a point in cell
thisN = Nsim[i,j]
if (thisN > 0){
# create data point location matrix
X = cbind(runif(thisN, min=10*(i-1), max=10*i),
runif(thisN, min=10*(j-1), max=10*j))
} else{
X = cbind(NA, NA)
}
Nfull[[i*j]] = list(i=i,j=j,n=thisN,
locs=X)
if (any(is.na(X)) == F){
if (xFlag){
Nx = X
xFlag = F
} else{
Nx = rbind(Nx,
X)
}
}
}
}
pineSim = cbind(x=pines$x, y=pines$y, z=N)
g1 = displayForest(pineSim, legendTitle=legendTitle,
discrete=T, maxColour=maxColour)
plot(g1)
plotDF = as.data.frame(Nx)
colnames(plotDF) = c("x", "y")
g2 = ggplot(plotDF, aes(x=x, y=y)) +
geom_point(colour="#56B4E9", size=0.5) +
labs(x="x (m)",
y="y (m)") +
xlim(0,300) +
ylim(0,300) +
coord_fixed()
plot(g2)
}
nMax = max(N)
# plot realisations
for (i in 1:3){
plotSimulation(N[i,],
legendTitle="Posterior Number\nof Pine Trees",
maxColour=nMax)
}
plotSimulation = function(N, legendTitle, maxColour){
Nsim = matrix(N, nrow=30, ncol=30)
Nfull = c()
xFlag = T
# loop over all cells
# create data
for (i in 1:30){
for (j in 1:30){
# draws locations if have a point in cell
thisN = Nsim[i,j]
if (thisN > 0){
# create data point location matrix
X = cbind(runif(thisN, min=10*(i-1), max=10*i),
runif(thisN, min=10*(j-1), max=10*j))
} else{
X = cbind(NA, NA)
}
Nfull[[i*j]] = list(i=i,j=j,n=thisN,
locs=X)
if (any(is.na(X)) == F){
if (xFlag){
Nx = X
xFlag = F
} else{
Nx = rbind(Nx,
X)
}
}
}
}
pineSim = cbind(x=pines$x, y=pines$y, z=N)
g1 = displayForest(pineSim, legendTitle=legendTitle,
discrete=T, maxColour=maxColour)
plot(g1)
plotDF = as.data.frame(Nx)
colnames(plotDF) = c("x", "y")
g2 = ggplot(plotDF, aes(x=x, y=y)) +
geom_point(colour="#56B4E9", size=0.75) +
labs(x="x (m)",
y="y (m)") +
xlim(0,300) +
ylim(0,300) +
coord_fixed()
plot(g2)
}
nMax = max(N)
# plot realisations
for (i in 1:3){
plotSimulation(N[i,],
legendTitle="Posterior Number\nof Pine Trees",
maxColour=nMax)
}
plotSimulation = function(N, legendTitle, maxColour){
Nsim = matrix(N, nrow=30, ncol=30)
Nfull = c()
xFlag = T
# loop over all cells
# create data
for (i in 1:30){
for (j in 1:30){
# draws locations if have a point in cell
thisN = Nsim[i,j]
if (thisN > 0){
# create data point location matrix
X = cbind(runif(thisN, min=10*(i-1), max=10*i),
runif(thisN, min=10*(j-1), max=10*j))
} else{
X = cbind(NA, NA)
}
Nfull[[i*j]] = list(i=i,j=j,n=thisN,
locs=X)
if (any(is.na(X)) == F){
if (xFlag){
Nx = X
xFlag = F
} else{
Nx = rbind(Nx,
X)
}
}
}
}
pineSim = cbind(x=pines$x, y=pines$y, z=N)
g1 = displayForest(pineSim, legendTitle=legendTitle,
discrete=T, maxColour=maxColour)
plot(g1)
plotDF = as.data.frame(Nx)
colnames(plotDF) = c("x", "y")
g2 = ggplot(plotDF, aes(x=x, y=y)) +
geom_point(colour="#56B4E9") +
labs(x="x (m)",
y="y (m)") +
xlim(0,300) +
ylim(0,300) +
coord_fixed()
plot(g2)
}
# plot realisations
for (i in 1:3){
plotSimulation(N[i,],
legendTitle="Posterior Number\nof Pine Trees",
maxColour=nMax)
}
NPrior = matrix(0, nrow=500, ncol=900)
NPost  = matrix(0, nrow=500, ncol=900)
for (s in 1:500){
NPrior[s,] = simulatePriorN(pines$N_obs, probs$alpha)
NPost[s,]  = simulatePosteriorN(pines$N_obs, probs$alpha, lambdaHat)
}
NPrior = matrix(0, nrow=500, ncol=900)
NPost  = matrix(0, nrow=500, ncol=900)
for (s in 1:500){
NPrior[s,] = simulatePriorN(pines$N_obs, probs$alpha)
NPost[s,]  = simulatePosteriorN(pines$N_obs, probs$alpha)
}
summary = cbind(meanPrior = apply(NPrior, 2, mean),
sdPrior   = apply(NPrior, 2, sd),
meanPost  = apply(NPost, 2, mean),
sdPost    = apply(NPost, 2, sd))
Titles = c("Prior\nMean", "Prior\nStandard Deviation",
"Posterior\nMean", "Posterior\nStandard Deviation")
head(summary)
maxMean = max(c(summary[,1], summary[,3]))
maxSD = max(c(summary[,2], summary[,4]))
Maxs = c(maxMean, maxSD, maxMean, maxSD)
for (i in 1:4){
data = cbind(pines$x,
pines$y,
summary[,i])
g = displayForest(data, legendTitle=Titles[i],
discrete=F, maxColour=Maxs)
plot(g)
}
for (i in 1:4){
data = cbind(pines$x,
pines$y,
summary[,i])
g = displayForest(data, legendTitle=Titles[i],
discrete=F, maxColour=Maxs[i])
plot(g)
}
install.packages("Matrix", type = "source")
install.packages("irlba", type = "source")
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/Setup.R", echo=TRUE)
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Code/Model 1")
# Building the CSZ model using TMB
library(TMB)
# Add the negative log likelihood functions from the TMB code
compile("MultiQuakeCSZ.cpp")
dyn.load(dynlib("MultiQuakeCSZ"))
# load in the subsidence data
load("DR3.RData")
# Create the meshes
# First the subfaults
fault    = getFullFaultGeom(max.edge=c(100, 1000), cutoff=30)
S        = length(fault) # number of subfaults
print(S)
plotFault(fault, z=rep(NA, length(fault)))
# Then the SPDE mesh based on the subfaults
spdeMesh = getSPDEMesh(fault, max.edge=c(100, 1000), cutoff=20)
B        = dim(spdeMesh$loc)[1] # number of basis functions
print(spdeMesh)
plotMesh(spdeMesh)
# Visualise both to check they are okay
plotBothMesh(fault, spdeMesh)
# Create the correct data for each earthquake
G = list() # the list of Okada matrices
subsidences = list() # list of subsidence vectors
v = list() # list of uncertainties
earthquakes = c("T1","T2","T3","T4","T5","T6","T7","T8","T9","T10","T11","T12")
E = length(earthquakes) # number of earthquakes
for (e in 1:E){
thisLon = DR3$Lon[DR3$event == earthquakes[e]]
thisLat = DR3$Lat[DR3$event == earthquakes[e]]
thisSub = DR3$subsidence[DR3$event == earthquakes[e]]
thisUnc = DR3$Uncertainty[DR3$event == earthquakes[e]]
thisG = getOkada(fault, thisLon, thisLat)
G[[e]] = as.matrix(thisG)
subsidences[[e]] = -thisSub # remember the change of sign
v[[e]] = thisUnc
}
## extract the depths of the centers of each subfault
depths = rep(0, S) # empty vector for depths
for (i in 1:S){
# Use positive depths
# as depth increases, taper goes from one to zero
depths[i] = -fault[[i]]$depth / (10^3) # change to kms
}
## SPDE part:
# Create the spde object with correct priors
# PC priors on SPDE
# P(range < a) = b
# P(sigma > c) = d
a = 200 # Estimated range of the spatial field
b = 0.5
c = 1 # an ``upper bound'' on the variance
d = 0.05
maternPri = c(a, b, c, d)
# create spde object
spdeINLA = inla.spde2.pcmatern(spdeMesh,
alpha=2,
prior.range=c(a, b),
prior.sigma=c(c, d))
# get the matricies out
spdeMatrix = spdeINLA$param.inla[c("M0","M1","M2")]
# shape found from taperPrior.R
# means that 95% of the time the taper drops to 0.05 by 20km.
shape = 93.757027137
scale = 0.001316695
taperPri = c(shape, scale)
# set up the data list
data = list(depth      = depths,
subsidence = subsidences,
v          = v,
okada      = G,
spdeIDX    = spdeMesh$idx$loc - 1, # -1 because c++ starts array indexes at 0.
M0         = spdeMatrix$M0,
M1         = spdeMatrix$M1,
M2         = spdeMatrix$M2,
maternPri  = maternPri,
taperPri   = taperPri)
# the parameters to optimise
# I am guessing are good starting parameters
parameters = list(X          = matrix(0.5, nrow=B, ncol=E),
logLambda  = -2.1,
mu         = 3.6,
logKappa   = -4.4,
logTau     = 3.7)
## create the objective function using TMB
obj = MakeADFun(data,
parameters,
random="X",
DLL="MultiQuakeCSZ",
hessian=TRUE)
# A wrapper function to see the parameters after each iteration
# This is used for debugging the shared component model.
allPar <<- matrix(nrow=0, ncol=length(obj$par))
allX <<- matrix(nrow=0, ncol=length(obj$env$last.par) - length(obj$par))
fnWrapper = function(par) {
# holds the parameters
allPar <<- rbind(allPar, par)
allX <<- rbind(allX, unname(obj$env$last.par[names(obj$env$last.par) == "X"]))
print(par)
return(obj$fn(par))
}
## Optimize the model parameters
optTime = system.time(opt0 <- nlminb(start     = obj$par,
objective = fnWrapper,
gradient  = obj$gr,
control   = list(iter.max  = 100000,
eval.max  = 100000)))[3]
