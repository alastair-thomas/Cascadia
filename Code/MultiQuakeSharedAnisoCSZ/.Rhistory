okadaSubs = list()
for (e in 1:E){
thisG = G[[e]]
theseSlipDraws = slipDraws[[e]]
okadaSubSims = matrix(0, nrow=dim(thisG)[1], ncol=nSims)
for (n in 1:nSims){
thisSlip = theseSlipDraws[,n]
okadaSubSims[,n] = thisG %*% thisSlip
}
okadaSubs[[e]] = -okadaSubSims
}
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Code/MultiQuakeSharedCSZ/Backup Results")
save(okadaSubs, file="Backup Subsidence.RData")
# plot predicted subsidence vs data all
plotAllSubsidencePredicition(okadaSubs, DR4)
summariseFixedParameters(fixedDraws, histLabel=histLabel)
# Predict a future earthquake
print(bestPars)
lambda = exp(bestPars[1])
mu  = bestPars[2]
kappaX = exp(bestPars[3])
tauX = exp(bestPars[4])
kappaW = exp(bestPars[5])
tauW = exp(bestPars[6])
nSims = 1000
spdeINLA = inla.spde2.pcmatern(spdeMesh,
alpha=2,
prior.range=c(40, 0.05),
prior.sigma=c(5, 0.05))
Qx = inla.spde2.precision(spdeINLA,
theta=c(log(tauX), log(kappaX)))
Qw = inla.spde2.precision(spdeINLA,
theta=c(log(tauW), log(kappaW)))
futureSlips = matrix(data=0, nrow=S, ncol=nSims)
taper = exp(-lambda*data$depth)
for (n in 1:nSims){
X = inla.qsample(Q=Qx)
w = inla.qsample(Q=Qw)
theseSlips = taper * exp(mu + (data$A %*% (X+w)))
futureSlips[,n] = theseSlips[,1]
}
## find the median and sd across draws, as well as 95% intervals
slipSum = cbind(mean  = (apply(futureSlips, 1, mean)),
sd    = (apply(futureSlips, 1, sd)),
width = (apply(futureSlips, 1, quantile, .975)) -
(apply(futureSlips, 1, quantile, .025)))
# plot the future mean slip
g = plotFault(fault,
z=slipSum[,1],
legendTitle="Future Slip\nMean (m)")
plot(g)
# plot the future slip standard deviation
g = plotFault(fault,
z=slipSum[,2],
legendTitle="Future Slip\nStandard Deviation (m)",
colourScale="plasma")
plot(g)
# plot the future 95% width
g = plotFault(fault,
z=slipSum[,3],
legendTitle="Future Slip\n95% PI Width (m)",
colourScale="mako")
plot(g)
# Magnitude of future quake
nSims = 1000
magnitudes = rep(0, nSims)
for (n in 1:nSims){
mag = getMomentFromSlip(futureSlips[,n], fault)
magnitudes[n] = mag
}
# plot the future magnitude distribution
plotOneMagnitude(magnitudes)
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Code/MultiQuakeSharedCSZ")
load("G whole Backup.RData")
futureSubs = matrix(0, nrow=dim(GFault)[1], ncol=nSims)
for (n in 1:nSims){
futureSubs[,n] = -(GFault %*% futureSlips[,n])
}
futureSub = rowMeans(futureSubs)
g = plotSubsidenceGrid2(futureSub, cbind(lonLatGrid[,1],
lonLatGrid[,2]))
plot(g)
optTime
sdTime
SD0
bestPars
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Code/MultiQuakeAnisoCSZ/Backup Results")
load("Backup Draws.RData")
load("Backup Times.RData")
load("Backup SD0.RData")
load("Backup Best Params.RData")
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Code/MultiQuakeAnisoCSZ")
load("backupFault.RData")
load("backupMesh.RData")
load("backupData.RData")
load("DR4.RData")
S = length(fault)
B = dim(spdeMesh$loc)[1]
E = length(data$subsidence)
nSims = 1000
# A dataframe for all the fixed parameters
fixedDraws = data.frame(Lambda = exp(results$logLambdaDraws),
Mu     = results$muDraws,
Kappa  = exp(results$logKappaDraws),
Tau    = exp(results$logTauDraws),
Psi    = exp(results$loghDraws))
# call a function that gives histograms and basic statistics of fixed pars
histLabel = c('\u03bb', '\u03bc', '\u03ba', '\u03c4', '\u03c8')
summariseFixedParameters(fixedDraws, histLabel=histLabel)
# Now calculate the prediction bounds for the taper
depths = seq(0,30,0.01)
lambdaQ = stats::quantile(exp(results$logLambdaDraws), probs=c(0.025, 0.5, 0.975))
tlower = exp(-lambdaQ[1]*depths)
tmedian = exp(-lambdaQ[2]*depths)
tupper = exp(-lambdaQ[3]*depths)
plotDF = data.frame(depth = depths,
lower = tlower,
taper = tmedian,
upper = tupper)
ggplot(plotDF) +
geom_ribbon(aes(x=depth, ymin=lower, ymax=upper), fill="lightblue", alpha=0.75) +
geom_line(aes(x=depth, y=taper), colour="black") +
labs(x="Depth (km)", y="Taper")
# Now summarise the useful parameters
rhoDraws = sqrt(8)/fixedDraws$Kappa
sigma2Draws = 1 / (4*pi*(fixedDraws$Kappa^2)*(fixedDraws$Tau^2))
understandableFixedParams = cbind(rho    = rhoDraws,
sigma2 = sigma2Draws)
usefulSummary = cbind(mean   = apply(understandableFixedParams, 2, mean),
median = apply(understandableFixedParams, 2, median),
sd     = apply(understandableFixedParams, 2, sd))
print(usefulSummary)
# Then all the Xs together
plotAllX(spdeMesh, results$xDraws, DR4)
# Now show the anisotropic factor range
# I think showing the lower, median and upper stretch
PsiQ = stats::quantile(exp(results$loghDraws), probs=c(0.025, 0.5, 0.975))
PsiQ
plotCorrelation = function(psi){
# Define the lengths of the major and minor axes
a = sqrt(psi)    # Length of the major axis
b = sqrt(1/psi)  # Length of the minor axis
# angle the field is at: fixed!
thetaMajor = deg2rad(-12.39776)
thetaMinor = deg2rad(-12.39776) + deg2rad(90)
# Generate points for a standard ellipse centered at (0, 0)
t = seq(0, 2*pi, length.out = 1000)
x_standard = a * cos(t)
y_standard = b * sin(t)
# Create a dataframe for the points
ellipse_df <- data.frame(x = x_standard, y = y_standard)
# Plot the ellipse
ggplot(ellipse_df, aes(x = x, y = y)) +
geom_path() +
coord_fixed() +
theme_minimal() +
labs(title = "Ellipse with Given Major and Minor Axes",
x = "X",
y = "Y")
# # Rotation matrix
# rotation_matrix <- matrix(c(cos(theta_major), -sin(theta_major), sin(theta_major), cos(theta_major)), nrow = 2)
#
# # Apply the rotation matrix to the points
# ellipse_points <- rotation_matrix %*% rbind(x_standard, y_standard)
#
# # Extract the rotated points
# x_rotated <- ellipse_points[1, ]
# y_rotated <- ellipse_points[2, ]
#
# # Create a dataframe for the points
# ellipse_df <- data.frame(x = x_rotated, y = y_rotated)
#
# # Plot the ellipse
# ggplot(ellipse_df, aes(x = x, y = y)) +
#   geom_path() +
#   coord_fixed() +
#   theme_minimal() +
#   labs(title = "Ellipse with Given Major and Minor Axes",
#        x = "X",
#        y = "Y")
}
plotCorrelation(1.5)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotCorrelation(1.5)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotCorrelation(1.5)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotCorrelation(1.5)
deg2rad(-12.39776)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
deg2rad(-12.39776)
plotCorrelation(1.5)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotCorrelation(1.5)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotCorrelation(1.5)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotCorrelation(1.5)
plotCorrelation(0.5)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotCorrelation(0.5)
plotCorrelation(c(0.5, 1, 1.5),)
plotCorrelation(c(0.5, 1, 1.5), c("lower", "median", "upper"))
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotCorrelation(c(0.5, 1, 1.5), c("lower", "median", "upper"))
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotCorrelation(c(0.5, 1, 1.5), c("lower", "median", "upper"))
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotCorrelation(c(0.5, 1, 1.5), c("lower", "median", "upper"))
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotCorrelation(c(0.5, 1, 1.5), c("lower", "median", "upper"))
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/plotter.R", echo=TRUE)
plotCorrelation(c(0.5, 1, 1.5), c("lower", "median", "upper"))
plotCorrelation(PsiQ, c("Lower 2.5%", "Median", "Upper 97.5%"))
# Now summarise the useful parameters
rhoDraws = sqrt(8)/fixedDraws$Kappa
sigma2Draws = 1 / (4*pi*(fixedDraws$Kappa^2)*(fixedDraws$Tau^2))
understandableFixedParams = cbind(rho    = rhoDraws,
sigma2 = sigma2Draws)
usefulSummary = cbind(mean   = apply(understandableFixedParams, 2, mean),
median = apply(understandableFixedParams, 2, median),
sd     = apply(understandableFixedParams, 2, sd))
print(usefulSummary)
# Find the slip summary for the simulated data
# Create the slip distributions
slipDraws = list()
earthquakes = as.factor(c("T1","T2","T3","T4","T5","T6","T7","T8","T9","T10","T11","T12"))
for (j in 1:E){
thisXDraws = as.matrix(results$xDraws[,j,])
## create the slip draws
theseSlipDraws = matrix(data=0, nrow=S, ncol=nSims)
for (n in 1:nSims){
taper = exp(-exp(results$logLambdaDraws[n])*data$depth)
theseSlips = taper * exp(results$muDraws[n] + (data$A %*% thisXDraws[,n]))
theseSlipDraws[,n] = theseSlips[,1]
}
# save slip draws
slipDraws[[j]] = theseSlipDraws
}
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Code/MultiQuakeAnisoCSZ/Backup Results")
# Now plot all the slip distributions
plotAllSlips(fault, slipDraws)
# Now get the magnitudes from all slips
nSims = 1000
magnitudes = matrix(0, nrow=nSims, ncol=E)
for (j in 1:E){
for (n in 1:nSims){
mag = getMomentFromSlip(slipDraws[[j]][,n], fault)
magnitudes[n,j] = mag
}
}
# plot all of them
plotAllMagnitudes(magnitudes)
for (j in 1:E){
for (n in 1:nSims){
mag = getMomentFromSlip(slipDraws[[j]][,n], fault)
magnitudes[n,j] = mag
}
}
# plot all of them
plotAllMagnitudes(magnitudes)
# Now predict subsidence and plot against real data
# save the subsidence estimate for later model comparisons
G = data$okada
okadaSubs = list()
for (e in 1:E){
thisG = G[[e]]
theseSlipDraws = slipDraws[[e]]
okadaSubSims = matrix(0, nrow=dim(thisG)[1], ncol=nSims)
for (n in 1:nSims){
thisSlip = theseSlipDraws[,n]
okadaSubSims[,n] = thisG %*% thisSlip
}
okadaSubs[[e]] = -okadaSubSims
}
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Code/MultiQuakeSharedCSZ/Backup Results")
save(okadaSubs, file="Backup Subsidence.RData")
# plot predicted subsidence vs data all
plotAllSubsidencePredicition(okadaSubs, DR4)
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Code/Model 4")
# Building the CSZ model using TMB
library(TMB)
# load in the data
load("DR4.RData")
load("backupMesh.RData")
load("backupFault.RData")
load("backupData.RData")
# set constants
B = dim(spdeMesh$loc)[1]
S = length(fault)
E = length(data$subsidence)
# Predict a future earthquake
print(bestPars)
SD0
optTime
sdTime
# Predict a future earthquake
print(bestPars)
lambda = exp(bestPars[1])
mu     = bestPars[2]
kappa  = exp(bestPars[3])
tau    = exp(bestPars[4])
Psi    = exp(bestPars[5])
# Add the negative log likelihood functions from the TMB code
compile("MakeQAnisotropic.cpp",
framework="TMBad")
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Code/MultiQuakeAnisoCSZ")
# Add the TMB code to make the Q matrix
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Code/MultiQuakeAnisoCSZ")
compile("MakeQAnisotropic.cpp",
framework="TMBad")
dyn.load(dynlib("MakeQAnisotropic"))
# Create objects needed
qData       = list(spde = data$spde)
qParameters = list(logKappa = log(kappa),
logTau   = log(tau),
logh     = c(psi, deg2rad(-12.39776)))
## create the objective function using TMB
TMB::config(tmbad.sparse_hessian_compress = 1)
dyn.load(dynlib("MakeQAnisotropic"))
obj = MakeADFun(qData,
qParameters,
map = list(logKappa = as.factor(NA),
logTau   = as.factor(NA),
logh     = as.factor(c(NA,NA))),
DLL     = "MakeQAnisotropic")
qParameters
# Predict a future earthquake
print(bestPars)
lambda = exp(bestPars[1])
mu     = bestPars[2]
kappa  = exp(bestPars[3])
tau    = exp(bestPars[4])
psi    = exp(bestPars[5])
# Add the TMB code to make the Q matrix
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Code/MultiQuakeAnisoCSZ")
compile("MakeQAnisotropic.cpp",
framework="TMBad")
dyn.load(dynlib("MakeQAnisotropic"))
# Create objects needed
qData       = list(spde = data$spde)
qParameters = list(logKappa = log(kappa),
logTau   = log(tau),
logh     = c(psi, deg2rad(-12.39776)))
qParameters
obj = MakeADFun(qData,
qParameters,
map = list(logKappa = as.factor(NA),
logTau   = as.factor(NA),
logh     = as.factor(c(NA,NA))),
DLL     = "MakeQAnisotropic")
rep = obj$report()
Qh = rep$Q
Qh
Qh = as.matrix(rep$Q)
Qh
nSims = 1000
futureSlips = matrix(data=0, nrow=S, ncol=nSims)
taper = exp(-lambda*data$depth)
for (n in 1:nSims){
X = inla.qsample(Q=Qh)
theseSlips = taper * exp(mu + (data$A %*% X))
futureSlips[,n] = theseSlips[,1]
}
## find the median and sd across draws, as well as 95% intervals
slipSum = cbind(mean  = (apply(futureSlips, 1, mean)),
sd    = (apply(futureSlips, 1, sd)),
width = (apply(futureSlips, 1, quantile, .975)) -
(apply(futureSlips, 1, quantile, .025)))
# plot the future mean slip
g = plotFault(fault,
z=slipSum[,1],
legendTitle="Future Slip\nMean (m)")
plot(g)
# plot the future slip standard deviation
g = plotFault(fault,
z=slipSum[,2],
legendTitle="Future Slip\nStandard Deviation (m)",
colourScale="plasma")
plot(g)
# plot the future 95% width
g = plotFault(fault,
z=slipSum[,3],
legendTitle="Future Slip\n95% PI Width (m)",
colourScale="mako")
plot(g)
# Magnitude of future quake
nSims = 1000
magnitudes = rep(0, nSims)
for (n in 1:nSims){
mag = getMomentFromSlip(futureSlips[,n], fault)
magnitudes[n] = mag
}
# plot the future magnitude distribution
plotOneMagnitude(magnitudes)
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Code/MultiQuakeAnisoCSZ")
load("G whole Backup.RData")
futureSubs = matrix(0, nrow=dim(GFault)[1], ncol=nSims)
for (n in 1:nSims){
futureSubs[,n] = -(GFault %*% futureSlips[,n])
}
futureSub = rowMeans(futureSubs)
g = plotSubsidenceGrid2(futureSub, cbind(lonLatGrid[,1],
lonLatGrid[,2]))
plot(g)
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Code/MultiQuakeSharedAnisoCSZ")
# Building the CSZ model using TMB
library(TMB)
# load in the data
load("DR4.RData")
load("backupMesh.RData")
load("backupFault.RData")
load("backupData.RData")
# set constants
B = dim(spdeMesh$loc)[1]
S = length(fault)
E = length(data$subsidence)
# Add the negative log likelihood functions from the TMB code
compile("MultiQuakeSharedAnisoCSZ.cpp",
framework="TMBad")
dyn.load(dynlib("MultiQuakeSharedAnisoCSZ"))
# the parameters to optimise
# I am guessing are good starting parameters
parameters = list(X          = matrix(0.1, nrow=B, ncol=E),
w          = rep(0.1, B),
logLambda  = -2.1,
mu         = 3.6,
logKappaX  = -4,
logTauX    = 5.5,
logKappaW  = -4.2,
logTauW    = 3.4,
logh       = c(0,deg2rad(-12.39776)))
## create the objective function using TMB
TMB::config(tmbad.sparse_hessian_compress = 1)
dyn.unload()
?TMB::config
dyn.load(dynlib("MultiQuakeSharedAnisoCSZ"))
# the parameters to optimise
# I am guessing are good starting parameters
parameters = list(X          = matrix(0.1, nrow=B, ncol=E),
w          = rep(0.1, B),
logLambda  = -2.1,
mu         = 3.6,
logKappaX  = -4,
logTauX    = 5.5,
logKappaW  = -4.2,
logTauW    = 3.4,
logh       = c(0,deg2rad(-12.39776)))
## create the objective function using TMB
TMB::config(DLL = "MultiQuakeSharedAnisoCSZ",
tmbad.sparse_hessian_compress = 1)
obj = MakeADFun(data,
parameters,
map = list(logh = as.factor(c(0,NA))),
random=c("X", "w"),
DLL="MultiQuakeSharedAnisoCSZ",
hessian=TRUE)
## Optimize the model parameters
optTime = system.time(opt0 <- nlminb(start     = obj$par,
objective = obj$fn,
gradient  = obj$gr,
control   = list(iter.max  = 100000,
eval.max  = 100000)))[3]
# outputs of optimisation
print(opt0)
print(optTime)
exp(-0.1842983)
# best parameters
bestPars = tail(obj$env$last.par.best, 7)
print(bestPars)
## Get standard errors via SD report
sdTime = system.time(SD0 <- TMB::sdreport(obj, getJointPrecision=TRUE,
bias.correct = TRUE,
bias.correct.control = list(sd = TRUE)))[3]
dyn.unload(dynlib("MultiQuakeSharedAnisoCSZ"))
# time to do sdreport
print(sdTime)
# summarise the SD report
print(SD0)
nSims = 1000
# Get draws from all the model parameters
draws = simulateCSZ(SD0, nSims=nSims)
## extract the draws for each parameter the draws
parnames = c(names(SD0[['par.fixed']]), names(SD0[['par.random']]))
logLambdaDraws = draws[parnames == 'logLambda',]
muDraws        = draws[parnames == 'mu',]
logKappaXDraws = draws[parnames == 'logKappaX',]
logTauXDraws   = draws[parnames == 'logTauX',]
logKappaWDraws = draws[parnames == 'logKappaW',]
logTauWDraws   = draws[parnames == 'logTauW',]
loghDraws      = draws[parnames == 'logh',]
xDraws         = draws[parnames == 'X',]
xDraws         = array(xDraws, dim=c(B, E, nSims)) # [basis function, earthquake, simulation]
wDraws         = draws[parnames == 'w',]
# save everything
results = list(logLambdaDraws = logLambdaDraws,
muDraws        = muDraws,
logKappaXDraws = logKappaXDraws,
logTauXDraws   = logTauXDraws,
logKappaWDraws = logKappaWDraws,
logTauWDraws   = logTauWDraws,
loghDraws      = loghDraws,
xDraws         = xDraws,
wDraws         = wDraws)
setwd("~/Uni/NTNU/Masters Project/CSZ/R/Code/MultiQuakeSharedAnisoCSZ/Backup Results")
save(results, file="Backup Draws.RData")
save(optTime, sdTime, file="Backup Times.RData")
save(bestPars, file="Backup Best Params.RData")
save(opt0, file="Backup Opt0.RData")
save(SD0, file="Backup SD0.RData")
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/MultiQuakeSharedAnisoCSZ/Validation.R", echo=TRUE)
source("~/Uni/NTNU/Masters Project/CSZ/R/Code/MultiQuakeSharedAnisoCSZ/Validation.R", echo=TRUE)
